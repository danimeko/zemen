// const jest = require('jest');

/**
 * 
 * Adopted from http://www.geez.org/Calendars/EthiopicCalendarTest.java
 *  * Ethiopic      Gregorian     JDN
 * 20/02/1855    29/10/1862    2401443
 * 29/10/1857    05/07/1865    2402423
 * 22/05/1858    29/01/1866    2402631
 * 10/08/1858    17/04/1866    2402709
 * 28/04/1859    05/01/1867    2402972
 * 05/05/1860    13/01/1868    2403345
 * 
 * --------------------------------------------------
 * Theses dates are taken from Calendrica applet:
 *   http://emr.cs.iit.edu/home/reingold/calendar-book/Calendrica.html
 * 
 * Ethiopic      Gregorian       JDN
 * 07/05/5492    01/01/0000    1721060
 * 08/05/5493    01/01/0001    1721426
 * 06/13/5499    27/08/0007    1723855
 * 
 * 01/01/5500    28/08/0007    1723856
 * 02/01/5500    29/08/0007    1723857
 * 01/01/0001    27/08/0008    1724221
 * 01/01/0002    27/08/0009    1724586
 * 01/01/0003    27/08/0010    1724951
 * 01/01/0004    28/08/0011    1724537
 * 05/13/5500    26/08/0008    1724220
 * 05/13/0001    26/08/0009    1724585
 * 05/13/0002    26/08/0010    1724950
 * 05/13/0003    26/08/0011    1725315
 * 06/13/0003    27/08/0011    1725316  first ethiopian leap year
 * 05/13/0004    26/08/0012    1725561
 * 
 * 06/02/1575    13/10/1582    2299159
 * 07/02/1575    14/10/1582    2299160  Julian 04/10/1582
 * 08/02/1575    15/10/1582    2299161
 * 09/02/1575    16/10/1582    2299162
 * 
 * 23/04/1892    01/01/1900    2415021
 * 23/04/1997    01/01/2005    2453372
 * 05/13/2000    10/09/2008    2454720
 * 
 * 22/04/1893    31/12/1900    2415385
 * 22/04/1985    31/12/1992    2448988
 * 22/04/1989    31/12/1996    2450449
 * 22/04/1993    31/12/2000    2451910
 * 22/04/1997    31/12/2004    2453371
 * 22/04/2001    31/12/2008    2454382
 * 14/04/2993    31/12/3000    2817152
 * 07/04/3993    31/12/4000    3182395
 * 22/03/5993    31/12/6000    3912880
 */

const zemen = require('../zemen');
let testCases = [
{et: [20, 2, 1855],gc: [29, 10, 1862]},
{et: [29, 10, 1857],gc: [5, 7, 1865]},
{et: [22, 5, 1858], gc: [29, 1, 1866]},
{et: [10, 8, 1858],gc: [17, 4, 1866] },
{et: [28, 4, 1859],gc: [5, 1, 1867] },
{et: [5, 5, 1860], gc: [13, 1, 1868]},
{et:[7,5,5492] ,gc:[1,1,0]},
{et:[8,5,5493] ,gc:[1,1,1]},
{et:[6,13,5499] ,gc:[27,8,7]},
{et:[1,1,5500] ,gc:[28,8,7]},
{et:[2,1,5500] ,gc:[29,8,7]},
{et:[1,1,1] ,gc:[27,8,8]},
{et:[1,1,2] ,gc:[27,8,9]},
{et:[1,1,3] ,gc:[27,8,10]},
{et:[1,1,4] ,gc:[28,8,11]},
{et:[5,13,5500] ,gc:[26,8,8]},
{et:[5,13,1] ,gc:[26,8,9]},
{et:[5,13,2] ,gc:[26,8,10]},
{et:[5,13,3] ,gc:[26,8,11]},
{et:[6,13,3] ,gc:[27,8,11]}, 
{et:[5,13,4] ,gc:[26,8,12]},
{et:[6,2,1575] ,gc:[13,10,1582]},
{et:[7,2,1575] ,gc:[14,10,1582]},  
{et:[8,2,1575] ,gc:[15,10,1582]},
{et:[9,2,1575] ,gc:[16,10,1582]},
{et:[23,4,1892] ,gc:[1,1,1900]},
{et:[23,4,1997] ,gc:[1,1,2005]},
{et:[5,13,2000] ,gc:[10,9,2008]},
{et:[22,4,1893] ,gc:[31,12,1900]},
{et:[22,4,1985] ,gc:[31,12,1992]},
{et:[22,4,1989] ,gc:[31,12,1996]},
{et:[22,4,1993] ,gc:[31,12,2000]},
{et:[22,4,1997] ,gc:[31,12,2004]},
{et:[22,4,2001] ,gc:[31,12,2008]},
{et:[14,4,2993] ,gc:[31,12,3000]},
{et:[7,4,3993] ,gc:[31,12,4000]},
{et:[22,3,5993] ,gc:[31,12,6000]}
];



function testToEC(testCase) {
    it(`should  convert ${testCase.gc} G.C to ${testCase.et} E.C`, () => {
        let actual = zemen.toEC(testCase.gc);
        expect(actual).toEqual(testCase.et);
    });
}

function testToGC(testCase) {
    it(`should  convert ${testCase.et} E.C to ${testCase.gc} G.C`, () => {
        let actual = zemen.toGC(testCase.et);
        expect(actual).toEqual(testCase.gc);
    });
}
describe('Zemen', () => {
    describe('converting to GC', () => {
        for (let i = 0; i < testCases.length; i++) {
            testToGC(testCases[i]);
        }
    });
    describe('converting to EC', () => {
        for (let i = 0; i < testCases.length; i++) {
            testToEC(testCases[i]);
        }
    });
});